
                         +-----------------+
                         |      CS 406     |
                         |   PROJECT ONE   |
                         | DESIGN DOCUMENT |
                         +-----------------+

---- GROUP ----

Angela Shi <shiy@lafayette.edu>
James Nigro <nigroj@lafayette.edu>
Ingrid Rumbaugh <rumbaughi@lafayette.edu>
Kerry Stranick <stranick@lafayette.edu>

---- PRELIMINARIES ----
None.

                              PRIORITY SCHEDULING
                                     ====

---- DATA STRUCTURES ----

>> Copy here the declaration of each new or changed `struct' or `struct'
>> member, global or static variable, `typedef', or enumeration.
>> Identify the purpose of each in 25 words or less.

Added to struct thread:

  /* Members for implementing priority scheduling */
  struct list donation_list;           /* Contains threads that are waiting on the lock that the 
                                          current thread owns. */
  struct list_elem donation_list_elem; /* Contains the the list elements of the threads that are 
                                          waiting on the lock. */
  struct lock* wait_on_lock;           /* Denotes which lock the waiting thread is currently
                                          waiting on. */
  int old_priority;                    /* Used for saving and restoring the priority of the
                                          donating thread. */

---- ALGORITHMS ----

>> Briefly describe your implementation of priority scheduling and how it
>> interacts with thread termination.

A new thread (call it T1)'s priority is set when it is created in the thread_create() call.
Once T1's priority is set, it temporarily becomes the currently running thread by making
the currently running thread (call it T2) yield. T1's priority is checked against the
priority of T2; if T1's priority is lower than T2's priority, it yields and T2 becomes the
currently running thread again. Otherwise, T2 remains yielded and T1 resumes its execution.

  

---- SYNCHRONIZATION ----

>> An operating system kernel is a complex, multithreaded program,
>> in which synchronizing multiple threads can be difficult. How
>> did you choose to synchronize timer_sleep()?

When thread_real_sleep() is called, the currently running thread is blocked
for the amount of time specified in the method call. When a thread is
blocked, Pintos calls the scheduler to check if any of the other currently
sleeping threads need to be woken up. If so, the first available sleeping
thread is woken up and becomes the new currently running thread. If no
sleeping threads need to be woken up, the scheduler chooses a new thread
to continue running from the rest of the currently running threads and
context switches to that thread. 

Due to the fact that timer_sleep() is simply an adaptation of the previous
sleep (in which a thread would spin and busy wait), there should be no
race cases or special cases in its implementation.

---- RATIONALE ----

>> Critique your design, pointing out advantages and disadvantages in
>> your design choices.

This design has the advantage of simplicity.  Encapsulating most
of the synchronization logic into a new "latch" structure
abstracts what little complexity there is into a separate layer,
making the design easier to reason about.  Also, all the new data
members are in `struct thread', with no need for any extra dynamic
allocation, etc., that would require extra management code.

On the other hand, this design is wasteful in that a child thread
cannot free itself before its parent has terminated.  A parent
thread that creates a large number of short-lived child threads
could unnecessarily exhaust kernel memory.  This is probably
acceptable for implementing kernel threads, but it may be a bad
idea for use with user processes because of the larger number of
resources that user processes tend to own.
